import React, { useState, useEffect } from 'react';
import { X, Calendar, Clock, Users, Briefcase, Sparkles, Loader } from 'lucide-react';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../../firebase';
import { DetailedLinkedInProfile, Candidature } from '../../types';
import { generateInterviewQuestions } from '../../services/ai';
import { findAvailableSlots, scheduleCalendarEvent } from '../../services/calendarService';
import { toast } from 'react-toastify';

interface ScheduleInterviewModalProps {
  isOpen: boolean;
  onClose: () => void;
  onInterviewScheduled: (interview: any) => void;
  candidates: DetailedLinkedInProfile[];
  candidatures: Candidature[];
}

export function ScheduleInterviewModal({
  isOpen,
  onClose,
  onInterviewScheduled,
  candidates,
  candidatures
}: ScheduleInterviewModalProps) {
  const [selectedCandidate, setSelectedCandidate] = useState('');
  const [selectedCandidature, setSelectedCandidature] = useState('');
  const [date, setDate] = useState('');
  const [time, setTime] = useState('');
  const [duration, setDuration] = useState(60);
  const [notes, setNotes] = useState('');
  const [suggestedSlots, setSuggestedSlots] = useState<{ date: string; time: string }[]>([]);
  const [isLoadingSlots, setIsLoadingSlots] = useState(false);
  const [isScheduling, setIsScheduling] = useState(false);
  const [autoGeneratedQuestions, setAutoGeneratedQuestions] = useState<string[]>([]);
  const [isGeneratingQuestions, setIsGeneratingQuestions] = useState(false);

  useEffect(() => {
    if (selectedCandidate && selectedCandidature) {
      handleFindSlots();
    }
  }, [selectedCandidate, selectedCandidature]);

  const handleFindSlots = async () => {
    setIsLoadingSlots(true);
    try {
      const slots = await findAvailableSlots(duration);
      setSuggestedSlots(slots);
    } catch (error) {
      console.error('Error finding available slots:', error);
      toast.error('Error al buscar horarios disponibles');
    } finally {
      setIsLoadingSlots(false);
    }
  };

  const handleGenerateQuestions = async () => {
    if (!selectedCandidature || !selectedCandidate) return;

    setIsGeneratingQuestions(true);
    try {
      const candidate = candidates.find(c => c.id === selectedCandidate);
      const candidature = candidatures.find(c => c.id === selectedCandidature);
      
      if (!candidate || !candidature) {
        throw new Error('Candidato o candidatura no encontrados');
      }

      const questions = await generateInterviewQuestions(candidate, candidature);
      setAutoGeneratedQuestions(questions);
    } catch (error) {
      console.error('Error generating questions:', error);
      toast.error('Error al generar preguntas para la entrevista');
    } finally {
      setIsGeneratingQuestions(false);
    }
  };

  const handleScheduleInterview = async () => {
    if (!selectedCandidate || !selectedCandidature || !date || !time) {
      toast.error('Por favor, complete todos los campos requeridos');
      return;
    }

    setIsScheduling(true);
    try {
      const candidate = candidates.find(c => c.id === selectedCandidate);
      const candidature = candidatures.find(c => c.id === selectedCandidature);

      if (!candidate || !candidature) {
        throw new Error('Candidato o candidatura no encontrados');
      }

      const dateTime = new Date(`${date}T${time}`);
      
      // Programar en el calendario
      const calendarEventId = await scheduleCalendarEvent({
        summary: `Entrevista: ${candidate.name} - ${candidature.title}`,
        description: `Entrevista para el puesto de ${candidature.title}\n\nCandidato: ${candidate.name}\n\nNotas: ${notes}\n\nPreguntas sugeridas:\n${autoGeneratedQuestions.join('\n')}`,
        startTime: dateTime,
        duration,
        attendees: [{ email: candidate.email }]
      });

      // Guardar en Firestore
      const interviewData = {
        candidateId: selectedCandidate,
        candidatureId: selectedCandidature,
        date: dateTime.toISOString(),
        duration,
        status: 'scheduled',
        notes,
        questions: autoGeneratedQuestions,
        calendarEventId,
        createdAt: new Date().toISOString()
      };

      const docRef = await addDoc(collection(db, 'interviews'), interviewData);
      
      onInterviewScheduled({ id: docRef.id, ...interviewData });
      toast.success('Entrevista programada con éxito');
      onClose();
    } catch (error) {
      console.error('Error scheduling interview:', error);
      toast.error('Error al programar la entrevista');
    } finally {
      setIsScheduling(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl">
        <div className="flex justify-between items-center p-6 border-b">
          <h2 className="text-2xl font-bold text-gray-800">Programar Nueva Entrevista</h2>
          <button onClick={onClose} className="text-gray-600 hover:text-gray-800">
            <X size={24} />
          </button>
        </div>

        <div className="p-6">
          <div className="grid grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Candidato
              </label>
              <select
                value={selectedCandidate}
                onChange={(e) => setSelectedCandidate(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md"
              >
                <option value="">Seleccionar candidato</option>
                {candidates.map((candidate) => (
                  <option key={candidate.id} value={candidate.id}>
                    {candidate.name}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Candidatura
              </label>
              <select
                value={selectedCandidature}
                onChange={(e) => setSelectedCandidature(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md"
              >
                <option value="">Seleccionar candidatura</option>
                {candidatures.map((candidature) => (
                  <option key={candidature.id} value={candidature.id}>
                    {candidature.title}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Fecha
              </label>
              <input
                type="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md"
                min={new Date().toISOString().split('T')[0]}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Hora
              </label>
              <input
                type="time"
                value={time}
                onChange={(e) => setTime(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Duración (minutos)
              </label>
              <select
                value={duration}
                onChange={(e) => setDuration(parseInt(e.target.value))}
                className="w-full p-2 border border-gray-300 rounded-md"
              >
                <option value={30}>30 minutos</option>
                <option value={45}>45 minutos</option>
                <option value={60}>1 hora</option>
                <option value={90}>1 hora 30 minutos</option>
                <option value={120}>2 horas</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Notas
              </label>
              <textarea
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md"
                rows={3}
              />
            </div>
          </div>

          {isLoadingSlots ? (
            <div className="mt-6 text-center">
              <Loader className="animate-spin mx-auto mb-2" size={24} />
              <p>Buscando horarios disponibles...</p>
            </div>
          ) : suggestedSlots.length > 0 && (
            <div className="mt-6">
              <h3 className="text-lg font-semibold mb-2">Horarios sugeridos:</h3>
              <div className="grid grid-cols-3 gap-4">
                {suggestedSlots.map((slot, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      setDate(slot.date);
                      setTime(slot.time);
                    }}
                    className={`p-2 rounded-md border ${
                      date === slot.date && time === slot.time
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-300 hover:border-blue-500'
                    }`}
                  >
                    {new Date(`${slot.date}T${slot.time}`).toLocaleString()}
                  </button>
                ))}
              </div>
            </div>
          )}

          <div className="mt-6">
            <button
              onClick={handleGenerateQuestions}
              disabled={isGeneratingQuestions || !selectedCandidate || !selectedCandidature}
              className="bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 disabled:opacity-50 flex items-center"
            >
              {isGeneratingQuestions ? (
                <>
                  <Loader className="animate-spin mr-2" size={20} />
                  Generando preguntas...
                </>
              ) : (
                <>
                  <Sparkles className="mr-2" size={20} />
                  Generar preguntas con IA
                </>
              )}
            </button>

            {autoGeneratedQuestions.length > 0 && (
              <div className="mt-4">
                <h4 className="font-semibold mb-2">Preguntas sugeridas:</h4>
                <ul className="list-disc list-inside space-y-2">
                  {autoGeneratedQuestions.map((question, index) => (
                    <li key={index} className="text-gray-700">{question}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>

        <div className="px-6 py-4 bg-gray-50 flex justify-end">
          <button
            onClick={onClose}
            className="mr-2 bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400"
          >
            Cancelar
          </button>
          <button
            onClick={handleScheduleInterview}
            disabled={isScheduling || !selectedCandidate || !selectedCandidature || !date || !time}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 disabled:opacity-50 flex items-center"
          >
            {isScheduling ? (
              <>
                <Loader className="animate-spin mr-2" size={20} />
                Programando...
              </>
            ) : (
              <>
                <Calendar className="mr-2" size={20} />
                Programar Entrevista
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}